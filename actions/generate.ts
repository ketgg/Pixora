"use server"

import Replicate from "replicate"
import { z } from "zod"
import { createClient } from "@/lib/supabase/server"

import { formSchema } from "@/app/(dashboard)/generate/_components/input-params"

import { REPLICATE_USERNAME } from "@/constants/replicate"
import { CREDITS_COST } from "@/constants/cost"

import { decrementUserCredits } from "./balance"

const replicate = new Replicate({
  auth: process.env.REPLICATE_API_TOKEN,
  useFileOutput: false,
})

type GenerateImageResponse = {
  error: any | null
  success: boolean
  data: string[] | null
}

export const generateImages = async (
  values: z.infer<typeof formSchema>,
): Promise<GenerateImageResponse> => {
  const modelName = values.modelName
  const isCustomModel = modelName.startsWith(REPLICATE_USERNAME)
  const isFluxDev = modelName === "black-forest-labs/flux-dev"
  const PROMPT_STRENGTH = 0.8

  const sharedParams = {
    prompt: values.prompt,
    go_fast: values.goFast,
    megapixels: values.megapixels,
    num_outputs: values.numOfOutputs,
    aspect_ratio: values.aspectRatio,
    output_format: values.outputFormat,
    output_quality: values.outputQuality,
    num_inference_steps: values.numOfInferenceSteps,
  }

  const modelInputParams = isCustomModel
    ? {
        ...sharedParams,
        model: "dev",
        guidance_scale: values.guidanceScale,
        lora_scale: values.loraScale,
        extra_lora_scale: 1,
        prompt_strength: PROMPT_STRENGTH,
      }
    : isFluxDev
      ? {
          ...sharedParams,
          guidance: values.guidance,
          prompt_strength: PROMPT_STRENGTH,
        }
      : sharedParams

  // console.log("@DEBUG", modelName, modelInputParams)
  try {
    // Update the user credits
    const { error: decrementErr, success: decrementSuccess } =
      await decrementUserCredits(
        isCustomModel
          ? CREDITS_COST["custom-model-generation"]
          : isFluxDev
            ? CREDITS_COST["flux-dev-generation"]
            : CREDITS_COST["flux-schnell-generation"],
      )
    if (decrementErr || !decrementSuccess) {
      throw new Error(
        "Insufficient credits, Click on billing tab to purchase more credits.",
      )
    }
    const result = await replicate.run(modelName as `${string}/${string}`, {
      input: modelInputParams,
    })
    // console.log("@ACTION:", result)
    // We get an array of image url's

    // Increment imagesCount
    const { error: updateErr, success: updateSucc } =
      await updateImagesGenerated(sharedParams.num_outputs)
    if (updateErr || !updateSucc) {
      throw new Error("Error updating the images generated.")
    }

    return {
      error: null,
      success: true,
      data: result as [],
    }
  } catch (error: any) {
    // console.log("@ERROR in generateImages:", error)
    return {
      error: error.message || "Something went wrong in generateImages",
      success: false,
      data: null,
    }
  }
}

export const updateImagesGenerated = async (images: number) => {
  try {
    const supabase = await createClient()
    const {
      data: { user },
    } = await supabase.auth.getUser()

    if (!user) {
      throw new Error("Unauthenticated")
    }

    // Fetch the current credits of the user
    const { data: profileData, error: fetchError } = await supabase
      .from("Profiles")
      .select("imagesGenerated")
      .eq("id", user.id)
      .single()

    if (fetchError) {
      throw new Error("Error getting images generated by the user.")
    }
    const currentImages = profileData.imagesGenerated || 0
    const newCount = currentImages + images

    // Update the user's credits in the Profiles table
    const { data: updateData, error: updateError } = await supabase
      .from("Profiles")
      .update({ imagesGenerated: newCount })
      .eq("id", user.id)

    if (updateError) {
      throw new Error("Error updating user images generated")
    }

    // Return the updated credits balance
    return {
      error: null,
      success: true,
      data: { imagesCount: newCount },
    }
  } catch (error) {
    return {
      error:
        error instanceof Error
          ? error.message
          : "Something went wrong while updating the user images generated in Profiles",
      success: false,
      data: null,
    }
  }
}
